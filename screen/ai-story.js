// A simple state management object
const state = {
    stories: [],
    currentStory: null,
    isGenerating: false,
    isSaving: false,
    selectedLanguage: "english"
};

// Helper function to update the UI based on state changes
const updateUI = () => {
    // Show/hide the form or the polished story view
    document.getElementById('story-form').style.display = state.currentStory ? 'none' : 'block';
    document.getElementById('polished-story-view').style.display = state.currentStory ? 'block' : 'none';

    // Manage generate button state
    const generateBtn = document.getElementById('generate-btn');
    const generateSpinner = document.getElementById('generate-spinner');
    generateBtn.disabled = state.isGenerating;
    generateSpinner.style.display = state.isGenerating ? 'inline-block' : 'none';
    generateBtn.innerHTML = state.isGenerating
        ? '<i class="fas fa-spinner fa-spin mr-2"></i> Generating...'
        : '<i class="fas fa-magic w-4 h-4 mr-2"></i> Generate Polished Story';
    
    // Manage save button state
    const saveBtn = document.getElementById('save-btn');
    const saveSpinner = document.getElementById('save-spinner');
    saveBtn.disabled = state.isSaving;
    saveSpinner.style.display = state.isSaving ? 'inline-block' : 'none';
    saveBtn.innerHTML = state.isSaving
        ? '<i class="fas fa-spinner fa-spin mr-2"></i> Saving...'
        : '<i class="fas fa-save w-4 h-4 mr-2"></i> Save to History';

    // Render the polished story if available
    if (state.currentStory) {
        document.getElementById('polished-story-text').textContent = state.currentStory.polished_story;
    }
};

// Helper function to render the story history list
const renderStoryHistory = () => {
    const historyList = document.getElementById('story-history-list');
    historyList.innerHTML = '';
    
    if (state.stories.length === 0) {
        historyList.innerHTML = '<p class="text-gray-500 text-center">No stories saved yet.</p>';
    } else {
        state.stories.forEach((story, index) => {
            const listItem = document.createElement('li');
            listItem.className = 'p-4 bg-gray-50 rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-100 transition-colors';
            listItem.innerHTML = `
                <div class="flex items-center justify-between mb-2">
                    <p class="font-semibold text-gray-800">${story.story_type.charAt(0).toUpperCase() + story.story_type.slice(1)} Story</p>
                    <span class="text-xs text-gray-500">${new Date(story.created_date).toLocaleDateString()}</span>
                </div>
                <p class="text-sm text-gray-600 truncate">${story.original_story}</p>
            `;
            listItem.addEventListener('click', () => {
                state.currentStory = story;
                updateUI();
            });
            historyList.appendChild(listItem);
        });
    }
};

// Simulate API calls
const loadStories = async () => {
    document.getElementById('history-loading').style.display = 'block';
    // Simulate fetching stories from a database
    await new Promise(resolve => setTimeout(resolve, 500));
    const mockStories = [
        {
            original_story: "My grandmother taught me how to weave baskets. It was a family tradition passed down.",
            polished_story: "In a small, sunlit workshop, the art of weaving has been passed down through generations of my family. I learned from my grandmother, a master artisan who taught me not just the intricate patterns, but the patience and love that goes into every single fiber...",
            story_type: "brand",
            language: "english",
            created_date: new Date().toISOString()
        },
        {
            original_story: "I make jewelry from old coins. I love giving them a new life.",
            polished_story: "Each piece of our jewelry holds a secret, a whispers from a past life. We meticulously transform forgotten coins into modern treasures, blending history with contemporary design to create a unique story you can wear...",
            story_type: "product",
            language: "english",
            created_date: new Date(Date.now() - 86400000).toISOString()
        }
    ];
    state.stories = mockStories;
    document.getElementById('history-loading').style.display = 'none';
    renderStoryHistory();
};

const handleGenerateStory = async (storyData) => {
    state.isGenerating = true;
    updateUI();
    
    const aiResponse = await new Promise(resolve => setTimeout(() => {
        resolve({
            polished_story: `This is a placeholder for the polished story generated by AI. It would be a professional, emotionally resonant narrative based on the user's input. For example, it might describe the artisan's journey, the unique materials used, and the cultural significance of the craft, all in a compelling, ready-to-use format. (Original: "${storyData.originalStory}")`
        });
    }, 2000));
    
    state.currentStory = {
        original_story: storyData.originalStory,
        polished_story: aiResponse.polished_story,
        story_type: storyData.storyType,
        language: state.selectedLanguage,
        created_date: new Date().toISOString()
    };
    state.isGenerating = false;
    updateUI();
};

const handleSaveStory = async (storyToSave) => {
    state.isSaving = true;
    updateUI();
    
    // Simulate saving the story to the 'database'
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    state.stories.unshift(storyToSave); // Add new story to the top
    state.isSaving = false;
    state.currentStory = null;
    updateUI();
    renderStoryHistory();
};

// Event Listeners
document.getElementById('generate-btn').addEventListener('click', () => {
    const originalStory = document.getElementById('story-textarea').value;
    const storyType = document.getElementById('story-type-select').value;
    if (originalStory.trim()) {
        handleGenerateStory({ originalStory, storyType });
    }
});

document.getElementById('save-btn').addEventListener('click', () => {
    if (state.currentStory) {
        handleSaveStory(state.currentStory);
    }
});

document.getElementById('edit-btn').addEventListener('click', () => {
    state.currentStory = null;
    updateUI();
});

document.getElementById('back-btn').addEventListener('click', () => {
    // This would normally navigate back to the dashboard
    alert("Navigating back to Dashboard...");
});

document.getElementById('language-selector').addEventListener('change', (e) => {
    state.selectedLanguage = e.target.value;
});

// Initial load
document.addEventListener('DOMContentLoaded', () => {
    loadStories();
    updateUI();
});